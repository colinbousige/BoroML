#!/usr/local/bin/python3

"""
Convert files to other format in stdout
Name must contain either:
- 'POSCAR' or 'OUTCAR' for vasp files
- '.data' or '.inp' for NNP input files
- '.lammpstrj' for lammps trajectory files
"""

from generatorfunctions import *
import argparse
import sys
from os.path import isfile
import numpy as np
import pandas as pd
from ase.constraints import FixAtoms
from ase.io.vasp import read_vasp_out
from ase.io.vasp import read_vasp

orange = "\033[93m"
bold   = "\033[1m"
normal = "\033[0m"

def write_lammps_traj(structure):
    for it,struc in enumerate(structure):
        a,b,c = struc.cell.cellpar()[:3]
        sys.stdout.write(f"ITEM: TIMESTEP\n")
        sys.stdout.write(f"{it}\n")
        sys.stdout.write(f"ITEM: NUMBER OF ATOMS\n")
        sys.stdout.write(f"{len(struc)}\n")
        sys.stdout.write(f"ITEM: BOX BOUNDS pp pp pp\n")
        sys.stdout.write(f"{0:15.9e} {a:15.9e}\n")
        sys.stdout.write(f"{0:15.9e} {b:15.9e}\n")
        sys.stdout.write(f"{0:15.9e} {c:15.9e}\n")
        sys.stdout.write(f"ITEM: ATOMS id element x y z\n")
        for i,(at,pos) in enumerate(zip(struc.get_chemical_symbols(), struc.positions)):
            x,y,z = pos
            sys.stdout.write(f"{i+1:>4d} {at:>2s} {x:15.9e} {y:15.9e} {z:15.9e}\n")


def write_inputdata(atom, comment):
    """
    From a list of Atoms object and comments, write an input.data file to `filename`.
    """
    for it,(struc,comm) in enumerate(zip(atom,comment)):
        a,b,c = struc.get_cell()/0.529177 #convert to Bohr
        sys.stdout.write("begin\n")
        sys.stdout.write(f"comment {comm}\n")
        sys.stdout.write(f"lattice {a[0]:22.14e} {a[1]:22.14e} {a[2]:22.14e}\n")
        sys.stdout.write(f"lattice {b[0]:22.14e} {b[1]:22.14e} {b[2]:22.14e}\n")
        sys.stdout.write(f"lattice {c[0]:22.14e} {c[1]:22.14e} {c[2]:22.14e}\n")
        for at,pos in zip(struc.get_chemical_symbols(), struc.positions):
            x,y,z = pos/0.529177 #convert to Bohr
            sys.stdout.write(f"atom {x:22.14e} {y:22.14e} {z:22.14e} {at:s} {'0.0':s} {'0.0':s} {0:22.14e} {0:22.14e} {0:22.14e}\n")
        sys.stdout.write(f"energy {0:22.14e}\n")
        sys.stdout.write(f"charge 0\n")
        sys.stdout.write("end\n")


def read_inputdata(filename: str):
    """
    Read input.data file and return a list of Atoms objects and the comments
    """
    def read_data_block(lines, begin: int, end: int):
        """
        Read block of structure in input.data that have been read in to `lines`
        """
        lattice = np.array([[i for i in lines[j].split(' ') if i][1:4] for j in range(begin+2, begin+5)], dtype=float)
        pos = np.array([[i for i in lines[j].split(' ') if i][1:4] for j in range(begin+5, end-2)], dtype=float)
        symb = np.array([[i for i in lines[j].split(' ') if i][4] for j in range(begin+5, end-2)])
        return(Atoms(symbols   = symb,
                     positions = pos*0.529177, #convert to Ã…
                     cell      = lattice*0.529177, pbc=True))
    # # # # # # # # # # # #
    with open(filename, 'r') as f:
        lines = f.read().splitlines()
    begin = np.array([i for i, x in enumerate(lines) if x == 'begin'])
    end = np.array([i for i, x in enumerate(lines) if x == 'end'])
    comments = np.array([x for x in lines if 'comment' in x])
    atoms = [read_data_block(lines, b, e) for b,e in zip(begin, end)]
    return(atoms, comments)


def main(args):
    input = args.input
    image = args.image
    out   = args.out
    fixed = args.fixed
    rmSub = args.rmSub

    if not isfile(input):
        sys.stderr.write(f"\n{bold}{orange}{input} file does not exist!{normal}\n\n")
        sys.exit()
    sys.stderr.write(f'Reading {input}... '); sys.stderr.flush()
    if ".lammpstrj" in input:
        atoms = read_lammps_dump(input, index = slice(0, -1))
        struc = [atoms[im] for im in image]
        comment = [f'{input} - image {im}' for im in image]
    elif ".data" in input:
        atoms, comments = read_inputdata(input)
        struc = [atoms[im] for im in image]
        comment = [comments[im] for im in image]
    elif ".inp" in input:
        atoms, comments = read_inputdata(input)
        struc = [atoms[im] for im in image]
        comment = [comments[im] for im in image]
    elif "OUTCAR" in input:
        atoms = read_vasp_out(input, index = slice(0, -1))
        struc = [atoms[im] for im in image]
        comment = [f'{input} - image {im}' for im in image]
    elif "POSCAR" in input:
        struc = read_vasp(input)
        comment = ""
    else:
        raise ValueError(f"""
{bold}{orange}Unknown input file format!
Name must contain either:
- 'POSCAR' or 'OUTCAR' for vasp files
- '.data' or '.inp' for NNP input files
- '.lammpstrj' for lammps trajectory files
{out}{normal}""")
    sys.stderr.write(f'Done.\n\n'); sys.stderr.flush()
    struc = [sort(st, tags = st.get_masses()) for st in struc]
    if rmSub is not None:
        for i,st in enumerate(struc):
            del st[[ atom.index for atom in st if atom.position[2] <= 2.35*(rmSub-1)+1.2 ]]
            struc[i] = st
    if fixed is not None:
        for i,st in enumerate(struc):
            c = FixAtoms(mask=st.positions[:,2] <= 2.35*(fixed-1)+1.2)
            st.set_constraint(c)
            st = sort(st, tags = st.get_masses())
            struc[i] = st
    if out=='vasp':
        write(sys.stdout, images = struc[0], format = "vasp", vasp5  = True)
        if len(struc)>1:
            sys.stderr.write(f"\n{bold}{orange}Warning: Only the first image is written in vasp format.{normal}\n")
    elif out=='lammps':
        write_lammps(name = None, atoms = struc[0], comments=comment[0], atom_style = 'atomic')
        if len(struc)>1:
            sys.stderr.write(f"\n{bold}{orange}Warning: Only the first image is written in     lammps format.{normal}\n")
    elif out=='lammpstrj':
        write_lammps_traj(struc)
    elif out=='xyz':
        write(sys.stdout, images = struc, format = "xyz")
    elif out=='n2p2':
        write_inputdata(struc, comment)
    else:
        raise ValueError(f"\n{bold}{orange}Unknown output format: {out}. Must be one of: 'vasp', 'xyz', 'lammps', 'lammpstrj', or 'n2p2'.{normal}\n")
    printcell = pd.DataFrame({'Natoms':np.array([len(st) for st in struc]),
                              'Composition':np.array([st.symbols.__str__() for st in struc]),
                              'a':[st.cell.cellpar()[0] for st in struc], 
                              'b':[st.cell.cellpar()[1] for st in struc], 
                              'c':[st.cell.cellpar()[2] for st in struc]})
    sys.stderr.write(f"""\n{bold}Structure parameters:{normal}

- Structures : 
{printcell.__str__()}

""")



class ArgumentParserWithDefaults(argparse.ArgumentParser):
    def add_argument(self, *args, help=None, default=None, **kwargs):
        if help is not None:
            kwargs['help'] = help
        if default is not None and args[0] != '-h':
            kwargs['default'] = default
            if help is not None:
                kwargs['help'] += f'\n{bold}{orange}Default: {normal}{orange}{format(default)}{normal}'
        super().add_argument(*args, **kwargs)


def get_parser():
    """ The argument parser of the command-line version """
    parser = ArgumentParserWithDefaults(formatter_class=argparse.RawTextHelpFormatter,
    description=f"""{bold}{orange}Convert files to other format in stdout
Name must contain either:
- 'POSCAR' or 'OUTCAR' for vasp files
- '.data' or '.inp' for NNP input files
- '.lammpstrj' for lammps trajectory files{normal}
""")
    parser.add_argument('--input', '-in',
                        help    = 'Input file name.',
                        default = "input.data")
    parser.add_argument('--image', '-i',
                        type    = int,
                        nargs   = "*",
                        help    = 'Indexes of the structures to convert.',
                        default = [-1])
    parser.add_argument('--out', '-out',
                        help    = "Output file format. Must be one of: 'vasp', 'xyz', 'lammps', 'lammpstrj', or 'n2p2'.",
                        type    = str,
                        default = 'lammps')
    parser.add_argument('--fixed', '-f',
                        help    = "Fixed number of substrate layers, starting from the bottom. Only for 'vasp' output.",
                        type    = int,
                        default = None)
    parser.add_argument('--rmSub', '-rmSub',
                        help    = "If provided, remove `rmSub` layers of substrate, starting from the bottom.",
                        type    = int,
                        default = None)
    parser.usage = f'\033[93m{parser.format_usage()[7:]}\033[0m'
    return parser


if __name__ == "__main__":
    """ Run as a stand-alone script """

    parser = get_parser()       # Start the command-line argument parsing
    args = parser.parse_args()  # Read the command-line arguments
    main(args)                  # run the command-line version



